import { render, fireEvent, screen } from '@testing-library/react';
import { reportError as mockReportError } from '../api';
import { ErrorBoundary } from '../error-boundary';

jest.mock('../api');

// —É–±—Ä–∞–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ Error –≤ –∫–æ–Ω—Å–æ–ª–∏
beforeAll(() => {
  jest.spyOn(console, 'error').mockImplementation(() => {});
});

// –≤–µ—Ä–Ω—É–ª–∏ console.error –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
afterAll(() => {
  console.error.mockRestore();
});

// –ø–æ—á–∏—Å—Ç–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –º–æ–∫–∞
afterEach(() => {
  jest.clearAllMocks();
});

function Bomb({ shouldThrow }) {
  if (shouldThrow) {
    throw new Error('üí£');
  } else {
    return null;
  }
}

test('calls reportError and renders that there was a problem', () => {
  mockReportError.mockResolvedValueOnce({ success: true });

  const { rerender } = render(
    <ErrorBoundary>
      <Bomb shouldThrow={false} />
    </ErrorBoundary>,
  );

  rerender(
    <ErrorBoundary>
      <Bomb shouldThrow />
    </ErrorBoundary>,
  );

  // –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ mockReportError –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  // error - –ª—é–±–∞—è –æ—à–∏–±–∫–∞
  // info - –æ–±—ä–µ–∫—Ç —Å–æ —Å—Ç–µ–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –≤–∫–ª—é—á–∞—é—â–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Bomb
  const error = expect.any(Error);
  const info = { componentStack: expect.stringContaining('Bomb') };
  expect(mockReportError).toHaveBeenCalledWith(error, info);
  expect(mockReportError).toHaveBeenCalledTimes(1);

  // –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –≤—ã–∑–≤–∞—Ç—å—Å—è 2 —Ä–∞–∑–∞: –∏–∑ jsdom –∏ react, –ø–æ—á–µ–º—É —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ 3 - –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ
  expect(console.error).toHaveBeenCalledTimes(3);

  // const tryAgainButton = screen.getByText('Try again?');
  // fireEvent.click(tryAgainButton);
});
